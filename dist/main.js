(()=>{var e={35:()=>{const e=Object.freeze({level:50,error:(...t)=>{e.level>=5&&console.error(...t)},warn:(...t)=>{e.level>=25&&console.warn(...t)},dev:(...t)=>{e.level>=50&&console.debug(...t)},log:(...t)=>{e.level>=60&&console.log(...t)},todo:()=>{e.level>=75&&console.info(...args)}});window.Logger=e},605:()=>{Handlebars.registerHelper("iff",(function(e,t,n,a){Logger.dev(`iff ${e} ${t} ${n} `,a);var o=!1;switch(t){case"==":o=e==n;break;case">":o=e>n;break;case"<":o=e<n;break;default:throw"Unknown operator "+t}return o?a.fn(this):a.inverse(this)}))},482:()=>{const e=Object.freeze(function(){let e=()=>{Logger.warn("store callback not specified!")},t={};return{getDataClone:()=>window.JSON.parse(window.JSON.stringify(t)),update(n){const a=t;t=window.JSON.parse(window.JSON.stringify(n)),e(a,this.getDataClone())},setCallback:t=>{e=t}}}());window.Store=e}},t={};function n(a){var o=t[a];if(void 0!==o)return o.exports;var i=t[a]={exports:{}};return e[a](i,i.exports,n),i.exports}(()=>{"use strict";n(35),n(605),n(482);class e extends HTMLElement{mode="closed";_sRoot=null;cmpName=this.tagName;template="<div>template unspecified!</div>";connectedCallback(){Logger.log("connected component:",this.cmpName),this._sRoot=this.attachShadow({mode:this.mode}),queueMicrotask((()=>{this._render()}))}_render(){Logger.log("_render cmp:",this.cmpName),Logger.dev("cmp-ctx:",this.dataContext),this.beforeRender();const e=Handlebars.compile(this.template);this._sRoot.innerHTML=e(this.dataContext?this.dataContext:{});const t=this._sRoot.querySelectorAll("[context]");Logger.dev("Found context elements:",t),t&&this.dataContext&&t.forEach((e=>{e.dataContext=this.dataContext[e.getAttribute("context")],Logger.dev(`setting context(@${this.cmpName}->{${e.tagName}}):`,e.dataContext)})),this.afterRender(this._sRoot)}shouldUpdate(e,t){return!0}onDataChange(e,t){if(Logger.dev(`onDataChange(${this.cmpName}):`,e,t),e!==t&&this.shouldUpdate(e,t))this._update(t);else{const n=this._sRoot.querySelectorAll("[context]");n&&this.dataContext&&n.forEach((n=>{n.onDataChange(e[n.getAttribute("context")],t[n.getAttribute("context")]),Logger.dev(`invoked onDataChange(@${this.cmpName}->{${n.tagName}})`)}))}}_update(e){Logger.dev(`rerendering component ${this.cmpName}`),this.dataContext=e,this._render()}beforeRender(){}afterRender(){}addListeners(){}disconnectedCallback(){}triggerEvent(e,t){const n=new CustomEvent(e,{detail:t});Logger.log(`Triggering event ${e}`,n),this.dispatchEvent(n)}}window.customElements.define("go-heading2",class extends e{mode="closed";cmpName="heading";template="\n<style>\n    h2 {\n        color: blue;\n    }\n</style>\n<h2>{{one}}</h2>\n";afterRender(){Logger.dev("afterRender context:",this.dataContext),Logger.dev("getAttribute:",this.getAttribute("can-you")),this._sRoot.querySelector("h2").addEventListener("click",(()=>{const e=Store.getDataClone();e.headings.h2.one="TEST",Store.update(e)}))}shouldUpdate(e,t){return e.one!==t.one}}),window.customElements.define("go-heading3",class extends e{mode="closed";cmpName="heading3";template="\n<style>\n    :host {\n        width: 100%;\n    }\n</style>\n<h3><slot></slot></h3>\n"}),window.customElements.define("go-panel",class extends e{template='<style>\n    div#panel {\n        display: flex;\n        \n        padding:5px;\n        \n        min-height: 50px;\n    }\n</style>\n<div id="panel"><slot></slot></div>\n';cmpName="panel";afterRender(){Logger.dev(`afterRender(${this.cmpName})`)}}),window.customElements.define("go-tabpanel-tabs",class extends e{cmpName="tabpanel-tabs";template="<style>\n    ul {\n        display: flex;\n        padding: 0;\n        margin: 0;\n\n        list-style-type: none;\n\n        background: #f1f1f1;\n        color: black;\n    }\n    ul > li{\n        display: inline;\n        text-align: left;\n\n        padding: 5px;\n        min-width: 36px;\n\n        background-color: lightgray;\n        border-right: 1px solid gray;\n    }\n    ul > li:hover{\n        background-color: #d4e5eb;\n    }\n    ul > li.active{\n        background-color: white;\n        font-weight: bold;\n    }\n</style>\n<ul>\n    {{#each items}}\n        <li key='{{this.key}}' {{#iff @root.active '==' this.key}} class=\"active\" {{/iff}}>\n            {{this.title}}\n        </li>\n    {{/each}}\n</ul>\n";afterRender(){this._sRoot.querySelector("ul").addEventListener("click",(e=>{if(Logger.dev("ul click event",e.target.tagName),"li"===e.target.tagName.toLowerCase()){const t=e.target.getAttribute("key"),n=this.dataContext.items[t];this.triggerEvent("tabchange",n)}}))}shouldUpdate(e,t){return e.items!==t.items||e.active!==t.active}}),window.customElements.define("go-tabpanel",class extends e{cmpName="tabpanel";template='<style>\n   div#container {\n        margin: 5px;\n        border: 1px solid gray;\n    }\n</style>\n<div id="container">\n    <go-tabpanel-tabs context="tabs"></go-tabpanel-tabs>\n    <go-panel>\n        <go-heading3>{{title}}</go-heading3>\n    </go-panel>\n</div>';dataContext={tabs:{items:{tab1:{title:"Tab 1",key:"tab1"},tab2:{title:"Tab 2",key:"tab2"},tab3:{title:"Tab 3",key:"tab3"}},active:"tab2"},title:"Click a tab",panels:{items:{tab1:{title:"I am Tab 1",description:"Tab 1 description here.."},tab2:{title:"I am Tab 2",description:"Tab 2 description here.."},tab3:{title:"I am Tab 3",description:"Tab 3 description here.."}}}};constructor(){super(),Logger.dev("TabPanel constructor!"),Store.update(this.dataContext),Store.setCallback(this.onDataChange.bind(this))}afterRender(){this._sRoot.querySelector("go-tabpanel-tabs").addEventListener("tabchange",(e=>{Logger.dev("tabchange event listened!",e);const t=e.detail,n=Store.getDataClone();n.title=t.title,n.tabs.active=t.key,Store.update(n)}))}shouldUpdate(e,t){return e.title!==t.title}}),window.customElements.define("go-portal",class extends e{mode="closed";cmpName="portal";template="\n<style>\n    p {\n        color: gray;\n    }\n</style>\n<p>I am portal component - mode:{{id}}</p>\n<button id=\"alertBtn\">update</button>\n<go-header context='headings'></go-header>";dataContext={id:"2013041",headings:{h1:"KiranYNG",h2:{one:"Kiran",two:"YNG"}}};constructor(){super(),Store.update(this.dataContext),Store.setCallback(this.onDataChange.bind(this))}afterRender(){this._sRoot.querySelector("#alertBtn").addEventListener("click",(e=>{Logger.dev("clicked button!",e);const t=Store.getDataClone();t.id="98765",Store.update(t)}))}shouldUpdate(e,t){return e.id!==t.id}}),window.customElements.define("go-header",class extends e{mode="closed";template="<style>\n    h2 {\n        color: blue;\n    }\n</style>\n<h1>{{h1}}</h1>\n<go-heading2 context='h2'></go-heading2>\n<go-heading2 context='h2'></go-heading2>";cmpName="header";afterRender(){Logger.dev("afterRender context:",this.dataContext)}shouldUpdate(e,t){return e.h1!==t.h1}})})()})();